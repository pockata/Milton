// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FlowerPot is an object representing the database table.
type FlowerPot struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"createdAt" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt time.Time `boil:"updatedAt" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	UnitID    string    `boil:"unit_id" json:"unit_id" toml:"unit_id" yaml:"unit_id"`

	R *flowerPotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L flowerPotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FlowerPotColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Name      string
	UnitID    string
}{
	ID:        "id",
	CreatedAt: "createdAt",
	UpdatedAt: "updatedAt",
	Name:      "name",
	UnitID:    "unit_id",
}

var FlowerPotTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Name      string
	UnitID    string
}{
	ID:        "FlowerPot.id",
	CreatedAt: "FlowerPot.createdAt",
	UpdatedAt: "FlowerPot.updatedAt",
	Name:      "FlowerPot.name",
	UnitID:    "FlowerPot.unit_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FlowerPotWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	Name      whereHelperstring
	UnitID    whereHelperstring
}{
	ID:        whereHelperstring{field: "\"FlowerPot\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"FlowerPot\".\"createdAt\""},
	UpdatedAt: whereHelpertime_Time{field: "\"FlowerPot\".\"updatedAt\""},
	Name:      whereHelperstring{field: "\"FlowerPot\".\"name\""},
	UnitID:    whereHelperstring{field: "\"FlowerPot\".\"unit_id\""},
}

// FlowerPotRels is where relationship names are stored.
var FlowerPotRels = struct {
	Unit          string
	FlowerPotJobs string
}{
	Unit:          "Unit",
	FlowerPotJobs: "FlowerPotJobs",
}

// flowerPotR is where relationships are stored.
type flowerPotR struct {
	Unit          *Unit    `boil:"Unit" json:"Unit" toml:"Unit" yaml:"Unit"`
	FlowerPotJobs JobSlice `boil:"FlowerPotJobs" json:"FlowerPotJobs" toml:"FlowerPotJobs" yaml:"FlowerPotJobs"`
}

// NewStruct creates a new relationship struct
func (*flowerPotR) NewStruct() *flowerPotR {
	return &flowerPotR{}
}

func (r *flowerPotR) GetUnit() *Unit {
	if r == nil {
		return nil
	}
	return r.Unit
}

func (r *flowerPotR) GetFlowerPotJobs() JobSlice {
	if r == nil {
		return nil
	}
	return r.FlowerPotJobs
}

// flowerPotL is where Load methods for each relationship are stored.
type flowerPotL struct{}

var (
	flowerPotAllColumns            = []string{"id", "createdAt", "updatedAt", "name", "unit_id"}
	flowerPotColumnsWithoutDefault = []string{"id", "updatedAt", "name", "unit_id"}
	flowerPotColumnsWithDefault    = []string{"createdAt"}
	flowerPotPrimaryKeyColumns     = []string{"id"}
	flowerPotGeneratedColumns      = []string{}
)

type (
	// FlowerPotSlice is an alias for a slice of pointers to FlowerPot.
	// This should almost always be used instead of []FlowerPot.
	FlowerPotSlice []*FlowerPot

	flowerPotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	flowerPotType                 = reflect.TypeOf(&FlowerPot{})
	flowerPotMapping              = queries.MakeStructMapping(flowerPotType)
	flowerPotPrimaryKeyMapping, _ = queries.BindMapping(flowerPotType, flowerPotMapping, flowerPotPrimaryKeyColumns)
	flowerPotInsertCacheMut       sync.RWMutex
	flowerPotInsertCache          = make(map[string]insertCache)
	flowerPotUpdateCacheMut       sync.RWMutex
	flowerPotUpdateCache          = make(map[string]updateCache)
	flowerPotUpsertCacheMut       sync.RWMutex
	flowerPotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single flowerPot record from the query.
func (q flowerPotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FlowerPot, error) {
	o := &FlowerPot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for FlowerPot")
	}

	return o, nil
}

// All returns all FlowerPot records from the query.
func (q flowerPotQuery) All(ctx context.Context, exec boil.ContextExecutor) (FlowerPotSlice, error) {
	var o []*FlowerPot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FlowerPot slice")
	}

	return o, nil
}

// Count returns the count of all FlowerPot records in the query.
func (q flowerPotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count FlowerPot rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q flowerPotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if FlowerPot exists")
	}

	return count > 0, nil
}

// Unit pointed to by the foreign key.
func (o *FlowerPot) Unit(mods ...qm.QueryMod) unitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UnitID),
	}

	queryMods = append(queryMods, mods...)

	return Units(queryMods...)
}

// FlowerPotJobs retrieves all the Job's Jobs with an executor via flower_pot_id column.
func (o *FlowerPot) FlowerPotJobs(mods ...qm.QueryMod) jobQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Job\".\"flower_pot_id\"=?", o.ID),
	)

	return Jobs(queryMods...)
}

// LoadUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flowerPotL) LoadUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFlowerPot interface{}, mods queries.Applicator) error {
	var slice []*FlowerPot
	var object *FlowerPot

	if singular {
		var ok bool
		object, ok = maybeFlowerPot.(*FlowerPot)
		if !ok {
			object = new(FlowerPot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFlowerPot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFlowerPot))
			}
		}
	} else {
		s, ok := maybeFlowerPot.(*[]*FlowerPot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFlowerPot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFlowerPot))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &flowerPotR{}
		}
		args[object.UnitID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flowerPotR{}
			}

			args[obj.UnitID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Unit`),
		qm.WhereIn(`Unit.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Unit")
	}

	var resultSlice []*Unit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Unit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Unit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Unit")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Unit = foreign
		if foreign.R == nil {
			foreign.R = &unitR{}
		}
		foreign.R.UnitFlowerPots = append(foreign.R.UnitFlowerPots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UnitID == foreign.ID {
				local.R.Unit = foreign
				if foreign.R == nil {
					foreign.R = &unitR{}
				}
				foreign.R.UnitFlowerPots = append(foreign.R.UnitFlowerPots, local)
				break
			}
		}
	}

	return nil
}

// LoadFlowerPotJobs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (flowerPotL) LoadFlowerPotJobs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFlowerPot interface{}, mods queries.Applicator) error {
	var slice []*FlowerPot
	var object *FlowerPot

	if singular {
		var ok bool
		object, ok = maybeFlowerPot.(*FlowerPot)
		if !ok {
			object = new(FlowerPot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFlowerPot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFlowerPot))
			}
		}
	} else {
		s, ok := maybeFlowerPot.(*[]*FlowerPot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFlowerPot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFlowerPot))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &flowerPotR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flowerPotR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Job`),
		qm.WhereIn(`Job.flower_pot_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Job")
	}

	var resultSlice []*Job
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Job")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Job")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Job")
	}

	if singular {
		object.R.FlowerPotJobs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &jobR{}
			}
			foreign.R.FlowerPot = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FlowerPotID {
				local.R.FlowerPotJobs = append(local.R.FlowerPotJobs, foreign)
				if foreign.R == nil {
					foreign.R = &jobR{}
				}
				foreign.R.FlowerPot = local
				break
			}
		}
	}

	return nil
}

// SetUnit of the flowerPot to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.UnitFlowerPots.
func (o *FlowerPot) SetUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Unit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"FlowerPot\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"unit_id"}),
		strmangle.WhereClause("\"", "\"", 0, flowerPotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UnitID = related.ID
	if o.R == nil {
		o.R = &flowerPotR{
			Unit: related,
		}
	} else {
		o.R.Unit = related
	}

	if related.R == nil {
		related.R = &unitR{
			UnitFlowerPots: FlowerPotSlice{o},
		}
	} else {
		related.R.UnitFlowerPots = append(related.R.UnitFlowerPots, o)
	}

	return nil
}

// AddFlowerPotJobs adds the given related objects to the existing relationships
// of the FlowerPot, optionally inserting them as new records.
// Appends related to o.R.FlowerPotJobs.
// Sets related.R.FlowerPot appropriately.
func (o *FlowerPot) AddFlowerPotJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Job) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FlowerPotID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Job\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"flower_pot_id"}),
				strmangle.WhereClause("\"", "\"", 0, jobPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FlowerPotID = o.ID
		}
	}

	if o.R == nil {
		o.R = &flowerPotR{
			FlowerPotJobs: related,
		}
	} else {
		o.R.FlowerPotJobs = append(o.R.FlowerPotJobs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &jobR{
				FlowerPot: o,
			}
		} else {
			rel.R.FlowerPot = o
		}
	}
	return nil
}

// FlowerPots retrieves all the records using an executor.
func FlowerPots(mods ...qm.QueryMod) flowerPotQuery {
	mods = append(mods, qm.From("\"FlowerPot\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"FlowerPot\".*"})
	}

	return flowerPotQuery{q}
}

// FindFlowerPot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFlowerPot(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*FlowerPot, error) {
	flowerPotObj := &FlowerPot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"FlowerPot\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, flowerPotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from FlowerPot")
	}

	return flowerPotObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FlowerPot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FlowerPot provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(flowerPotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	flowerPotInsertCacheMut.RLock()
	cache, cached := flowerPotInsertCache[key]
	flowerPotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			flowerPotAllColumns,
			flowerPotColumnsWithDefault,
			flowerPotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(flowerPotType, flowerPotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(flowerPotType, flowerPotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"FlowerPot\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"FlowerPot\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into FlowerPot")
	}

	if !cached {
		flowerPotInsertCacheMut.Lock()
		flowerPotInsertCache[key] = cache
		flowerPotInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the FlowerPot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FlowerPot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	flowerPotUpdateCacheMut.RLock()
	cache, cached := flowerPotUpdateCache[key]
	flowerPotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			flowerPotAllColumns,
			flowerPotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update FlowerPot, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"FlowerPot\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, flowerPotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(flowerPotType, flowerPotMapping, append(wl, flowerPotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update FlowerPot row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for FlowerPot")
	}

	if !cached {
		flowerPotUpdateCacheMut.Lock()
		flowerPotUpdateCache[key] = cache
		flowerPotUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q flowerPotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for FlowerPot")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for FlowerPot")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FlowerPotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flowerPotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"FlowerPot\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flowerPotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in flowerPot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all flowerPot")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FlowerPot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FlowerPot provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(flowerPotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	flowerPotUpsertCacheMut.RLock()
	cache, cached := flowerPotUpsertCache[key]
	flowerPotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			flowerPotAllColumns,
			flowerPotColumnsWithDefault,
			flowerPotColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			flowerPotAllColumns,
			flowerPotPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert FlowerPot, could not build update column list")
		}

		ret := strmangle.SetComplement(flowerPotAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(flowerPotPrimaryKeyColumns))
			copy(conflict, flowerPotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"FlowerPot\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(flowerPotType, flowerPotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(flowerPotType, flowerPotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert FlowerPot")
	}

	if !cached {
		flowerPotUpsertCacheMut.Lock()
		flowerPotUpsertCache[key] = cache
		flowerPotUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single FlowerPot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FlowerPot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FlowerPot provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), flowerPotPrimaryKeyMapping)
	sql := "DELETE FROM \"FlowerPot\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from FlowerPot")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for FlowerPot")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q flowerPotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no flowerPotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from FlowerPot")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FlowerPot")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FlowerPotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flowerPotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"FlowerPot\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flowerPotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flowerPot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FlowerPot")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FlowerPot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFlowerPot(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlowerPotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FlowerPotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flowerPotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"FlowerPot\".* FROM \"FlowerPot\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flowerPotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FlowerPotSlice")
	}

	*o = slice

	return nil
}

// FlowerPotExists checks if the FlowerPot row exists.
func FlowerPotExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"FlowerPot\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if FlowerPot exists")
	}

	return exists, nil
}

// Exists checks if the FlowerPot row exists.
func (o *FlowerPot) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FlowerPotExists(ctx, exec, o.ID)
}
