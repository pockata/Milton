// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Unit is an object representing the database table.
type Unit struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"createdAt" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt time.Time `boil:"updatedAt" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	MDNS      string    `boil:"mdns" json:"mdns" toml:"mdns" yaml:"mdns"`

	R *unitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L unitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UnitColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Name      string
	MDNS      string
}{
	ID:        "id",
	CreatedAt: "createdAt",
	UpdatedAt: "updatedAt",
	Name:      "name",
	MDNS:      "mdns",
}

var UnitTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Name      string
	MDNS      string
}{
	ID:        "Unit.id",
	CreatedAt: "Unit.createdAt",
	UpdatedAt: "Unit.updatedAt",
	Name:      "Unit.name",
	MDNS:      "Unit.mdns",
}

// Generated where

var UnitWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	Name      whereHelperstring
	MDNS      whereHelperstring
}{
	ID:        whereHelperstring{field: "\"Unit\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"Unit\".\"createdAt\""},
	UpdatedAt: whereHelpertime_Time{field: "\"Unit\".\"updatedAt\""},
	Name:      whereHelperstring{field: "\"Unit\".\"name\""},
	MDNS:      whereHelperstring{field: "\"Unit\".\"mdns\""},
}

// UnitRels is where relationship names are stored.
var UnitRels = struct {
	UnitFlowerPots string
	UnitJobs       string
	UnitLogs       string
}{
	UnitFlowerPots: "UnitFlowerPots",
	UnitJobs:       "UnitJobs",
	UnitLogs:       "UnitLogs",
}

// unitR is where relationships are stored.
type unitR struct {
	UnitFlowerPots FlowerPotSlice `boil:"UnitFlowerPots" json:"UnitFlowerPots" toml:"UnitFlowerPots" yaml:"UnitFlowerPots"`
	UnitJobs       JobSlice       `boil:"UnitJobs" json:"UnitJobs" toml:"UnitJobs" yaml:"UnitJobs"`
	UnitLogs       LogSlice       `boil:"UnitLogs" json:"UnitLogs" toml:"UnitLogs" yaml:"UnitLogs"`
}

// NewStruct creates a new relationship struct
func (*unitR) NewStruct() *unitR {
	return &unitR{}
}

func (r *unitR) GetUnitFlowerPots() FlowerPotSlice {
	if r == nil {
		return nil
	}
	return r.UnitFlowerPots
}

func (r *unitR) GetUnitJobs() JobSlice {
	if r == nil {
		return nil
	}
	return r.UnitJobs
}

func (r *unitR) GetUnitLogs() LogSlice {
	if r == nil {
		return nil
	}
	return r.UnitLogs
}

// unitL is where Load methods for each relationship are stored.
type unitL struct{}

var (
	unitAllColumns            = []string{"id", "createdAt", "updatedAt", "name", "mdns"}
	unitColumnsWithoutDefault = []string{"id", "updatedAt", "name", "mdns"}
	unitColumnsWithDefault    = []string{"createdAt"}
	unitPrimaryKeyColumns     = []string{"id"}
	unitGeneratedColumns      = []string{}
)

type (
	// UnitSlice is an alias for a slice of pointers to Unit.
	// This should almost always be used instead of []Unit.
	UnitSlice []*Unit

	unitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	unitType                 = reflect.TypeOf(&Unit{})
	unitMapping              = queries.MakeStructMapping(unitType)
	unitPrimaryKeyMapping, _ = queries.BindMapping(unitType, unitMapping, unitPrimaryKeyColumns)
	unitInsertCacheMut       sync.RWMutex
	unitInsertCache          = make(map[string]insertCache)
	unitUpdateCacheMut       sync.RWMutex
	unitUpdateCache          = make(map[string]updateCache)
	unitUpsertCacheMut       sync.RWMutex
	unitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single unit record from the query.
func (q unitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Unit, error) {
	o := &Unit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Unit")
	}

	return o, nil
}

// All returns all Unit records from the query.
func (q unitQuery) All(ctx context.Context, exec boil.ContextExecutor) (UnitSlice, error) {
	var o []*Unit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Unit slice")
	}

	return o, nil
}

// Count returns the count of all Unit records in the query.
func (q unitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Unit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q unitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Unit exists")
	}

	return count > 0, nil
}

// UnitFlowerPots retrieves all the FlowerPot's FlowerPots with an executor via unit_id column.
func (o *Unit) UnitFlowerPots(mods ...qm.QueryMod) flowerPotQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"FlowerPot\".\"unit_id\"=?", o.ID),
	)

	return FlowerPots(queryMods...)
}

// UnitJobs retrieves all the Job's Jobs with an executor via unit_id column.
func (o *Unit) UnitJobs(mods ...qm.QueryMod) jobQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Job\".\"unit_id\"=?", o.ID),
	)

	return Jobs(queryMods...)
}

// UnitLogs retrieves all the Log's Logs with an executor via unit_id column.
func (o *Unit) UnitLogs(mods ...qm.QueryMod) logQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Log\".\"unit_id\"=?", o.ID),
	)

	return Logs(queryMods...)
}

// LoadUnitFlowerPots allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (unitL) LoadUnitFlowerPots(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUnit interface{}, mods queries.Applicator) error {
	var slice []*Unit
	var object *Unit

	if singular {
		var ok bool
		object, ok = maybeUnit.(*Unit)
		if !ok {
			object = new(Unit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUnit))
			}
		}
	} else {
		s, ok := maybeUnit.(*[]*Unit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUnit))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &unitR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &unitR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`FlowerPot`),
		qm.WhereIn(`FlowerPot.unit_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FlowerPot")
	}

	var resultSlice []*FlowerPot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FlowerPot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on FlowerPot")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for FlowerPot")
	}

	if singular {
		object.R.UnitFlowerPots = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &flowerPotR{}
			}
			foreign.R.Unit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UnitID {
				local.R.UnitFlowerPots = append(local.R.UnitFlowerPots, foreign)
				if foreign.R == nil {
					foreign.R = &flowerPotR{}
				}
				foreign.R.Unit = local
				break
			}
		}
	}

	return nil
}

// LoadUnitJobs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (unitL) LoadUnitJobs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUnit interface{}, mods queries.Applicator) error {
	var slice []*Unit
	var object *Unit

	if singular {
		var ok bool
		object, ok = maybeUnit.(*Unit)
		if !ok {
			object = new(Unit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUnit))
			}
		}
	} else {
		s, ok := maybeUnit.(*[]*Unit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUnit))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &unitR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &unitR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Job`),
		qm.WhereIn(`Job.unit_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Job")
	}

	var resultSlice []*Job
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Job")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Job")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Job")
	}

	if singular {
		object.R.UnitJobs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &jobR{}
			}
			foreign.R.Unit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UnitID {
				local.R.UnitJobs = append(local.R.UnitJobs, foreign)
				if foreign.R == nil {
					foreign.R = &jobR{}
				}
				foreign.R.Unit = local
				break
			}
		}
	}

	return nil
}

// LoadUnitLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (unitL) LoadUnitLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUnit interface{}, mods queries.Applicator) error {
	var slice []*Unit
	var object *Unit

	if singular {
		var ok bool
		object, ok = maybeUnit.(*Unit)
		if !ok {
			object = new(Unit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUnit))
			}
		}
	} else {
		s, ok := maybeUnit.(*[]*Unit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUnit))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &unitR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &unitR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Log`),
		qm.WhereIn(`Log.unit_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Log")
	}

	var resultSlice []*Log
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Log")
	}

	if singular {
		object.R.UnitLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &logR{}
			}
			foreign.R.Unit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UnitID {
				local.R.UnitLogs = append(local.R.UnitLogs, foreign)
				if foreign.R == nil {
					foreign.R = &logR{}
				}
				foreign.R.Unit = local
				break
			}
		}
	}

	return nil
}

// AddUnitFlowerPots adds the given related objects to the existing relationships
// of the Unit, optionally inserting them as new records.
// Appends related to o.R.UnitFlowerPots.
// Sets related.R.Unit appropriately.
func (o *Unit) AddUnitFlowerPots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FlowerPot) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UnitID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"FlowerPot\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"unit_id"}),
				strmangle.WhereClause("\"", "\"", 0, flowerPotPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &unitR{
			UnitFlowerPots: related,
		}
	} else {
		o.R.UnitFlowerPots = append(o.R.UnitFlowerPots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &flowerPotR{
				Unit: o,
			}
		} else {
			rel.R.Unit = o
		}
	}
	return nil
}

// AddUnitJobs adds the given related objects to the existing relationships
// of the Unit, optionally inserting them as new records.
// Appends related to o.R.UnitJobs.
// Sets related.R.Unit appropriately.
func (o *Unit) AddUnitJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Job) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UnitID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Job\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"unit_id"}),
				strmangle.WhereClause("\"", "\"", 0, jobPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &unitR{
			UnitJobs: related,
		}
	} else {
		o.R.UnitJobs = append(o.R.UnitJobs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &jobR{
				Unit: o,
			}
		} else {
			rel.R.Unit = o
		}
	}
	return nil
}

// AddUnitLogs adds the given related objects to the existing relationships
// of the Unit, optionally inserting them as new records.
// Appends related to o.R.UnitLogs.
// Sets related.R.Unit appropriately.
func (o *Unit) AddUnitLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Log) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UnitID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"unit_id"}),
				strmangle.WhereClause("\"", "\"", 0, logPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &unitR{
			UnitLogs: related,
		}
	} else {
		o.R.UnitLogs = append(o.R.UnitLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &logR{
				Unit: o,
			}
		} else {
			rel.R.Unit = o
		}
	}
	return nil
}

// Units retrieves all the records using an executor.
func Units(mods ...qm.QueryMod) unitQuery {
	mods = append(mods, qm.From("\"Unit\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"Unit\".*"})
	}

	return unitQuery{q}
}

// FindUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUnit(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Unit, error) {
	unitObj := &Unit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Unit\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, unitObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Unit")
	}

	return unitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Unit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Unit provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(unitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	unitInsertCacheMut.RLock()
	cache, cached := unitInsertCache[key]
	unitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			unitAllColumns,
			unitColumnsWithDefault,
			unitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(unitType, unitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(unitType, unitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Unit\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Unit\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Unit")
	}

	if !cached {
		unitInsertCacheMut.Lock()
		unitInsertCache[key] = cache
		unitInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Unit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Unit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	unitUpdateCacheMut.RLock()
	cache, cached := unitUpdateCache[key]
	unitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			unitAllColumns,
			unitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Unit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Unit\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, unitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(unitType, unitMapping, append(wl, unitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Unit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Unit")
	}

	if !cached {
		unitUpdateCacheMut.Lock()
		unitUpdateCache[key] = cache
		unitUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q unitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Unit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Unit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UnitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Unit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in unit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all unit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Unit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Unit provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(unitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	unitUpsertCacheMut.RLock()
	cache, cached := unitUpsertCache[key]
	unitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			unitAllColumns,
			unitColumnsWithDefault,
			unitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			unitAllColumns,
			unitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert Unit, could not build update column list")
		}

		ret := strmangle.SetComplement(unitAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(unitPrimaryKeyColumns))
			copy(conflict, unitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"Unit\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(unitType, unitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(unitType, unitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Unit")
	}

	if !cached {
		unitUpsertCacheMut.Lock()
		unitUpsertCache[key] = cache
		unitUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Unit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Unit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Unit provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), unitPrimaryKeyMapping)
	sql := "DELETE FROM \"Unit\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Unit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Unit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q unitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no unitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Unit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Unit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UnitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Unit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from unit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Unit")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Unit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUnit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UnitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Unit\".* FROM \"Unit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UnitSlice")
	}

	*o = slice

	return nil
}

// UnitExists checks if the Unit row exists.
func UnitExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Unit\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Unit exists")
	}

	return exists, nil
}

// Exists checks if the Unit row exists.
func (o *Unit) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UnitExists(ctx, exec, o.ID)
}
